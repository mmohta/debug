#!/bin/sh
#set -xv //enable debug

# Checks the files to be committed for the presence of print_r(),
# var_dump(), die()
# The array below can be extended for further checks

checks[1]="\s+var_dump\("
checks[2]="\s+print_r\("
checks[3]="\s+die\("
checks[4]="\s+echo"
checks[5]="\s+console\.log\("
checks[6]="\s+console\.debug\("
checks[7]="\s+console\.warn\("
checks[8]="\s+console\.trace\("
checks[9]="\s+exit\("
checks[10]="\s+error_log\("
checks[11]="\;\;"
checks[12]="\s+alert\("
checks[13]="\s+debug_backtrace\("
checks[14]="\s+debug_print_backtrace\("
checks[15]="<<<<<<<|>>>>>>>"

green='\E[1;32m'
white='\E[1;37m'
yellow='\E[1;33m'
red='\E[0;31m'

if [ $# -eq 0 ]; then
    DEBUG=0
else
    DEBUG=$1
fi

element_count=${#checks[@]}
let "element_count = $element_count + 1"
file_count=0

ROOT_DIR="$(pwd)/"
ERRORS_BUFFER=""
for file in `git status --porcelain | grep '^[ M|A]' | cut -c4-`
do
    index=1
    let "file_count = $file_count + 1"
    # Get last three chars from the file path.
    if [[ "${file: -3}" == "php" ]]; then
        if [ $DEBUG == 1 ]; then
            echo "Checking file: $file for PHP errors"
        fi
        ERRORS=$(php -l "$file" 2>&1)
        if [ "$ERRORS" != "" ]; then
            if [[ $ERRORS = "PHP Parse error"* ]]; then
                ERRORS_BUFFER="$ERRORS_BUFFER\n$ERRORS"
            fi
        fi
    fi

    # Check for trailing comma in js files
    if [[ "${file: -3}" == ".js" ]]; then
        if [ $DEBUG == 1 ]; then
            echo "Checking file: $file for js comma errors"
        fi
        # TODO: find a way to print line numbers with -Pzl option
        ERRORS=$(grep -Pzl ",\s*\n+(\s*\/\/.*\n)*\s*[\}\)\]]" $ROOT_DIR$file | grep -v "\/\/" | grep -v "#" 2>&1)
        if [ "$ERRORS" != "" ]; then
            ERRORS_BUFFER="$ERRORS_BUFFER\n$ERRORS"
        fi
    fi

    # search for each element in checks array
    while [ "$index" -lt "$element_count" ]
    do
        if [ $DEBUG == 1 ]; then
            echo "Checking file: $file [${checks[$index]}]"
        fi
        ERRORS=$(egrep -H -n -i "${checks[$index]}" $ROOT_DIR$file | grep -v "\/\/" | grep -v "#" 2>&1)
        if [ "$ERRORS" != "" ]; then
            if [ "$ERRORS_BUFFER" != "" ]; then
                ERRORS_BUFFER="$ERRORS_BUFFER\n$ERRORS"
            else
                ERRORS_BUFFER="$ERRORS"
            fi
            #echo -ne "$yellow"
            #echo "${checks[$index]} found in file: $file "
            #echo -ne "$white"
        fi
        let "index = $index + 1"
    done
done

if [ "$ERRORS_BUFFER" != "" ]; then
    echo
    echo "These errors were found in try-to-commit files: "
    echo -ne "$red"
    echo -e "$ERRORS_BUFFER"
    echo -ne "$white"
    echo
    echo "Can't commit, fix errors first."
    exit 1
else
    echo -ne "$green"
    if [ $file_count == 0 ]; then
        echo "Nothing to commit."
    else
        echo "Commit successfully."
    fi
    echo -ne "$white"
fi
